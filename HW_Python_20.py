# Напишите функцию merge_dicts, которая принимает произвольное количество словарей в качестве аргументов
# и возвращает новый словарь, объединяющий все входные словари. Если ключи повторяются,
# значения должны быть объединены в список. Функция должна использовать аргумент **kwargs
# для принятия произвольного числа аргументов словаря.

def merge_dicts(**kwargs) -> dict:
    new_dict = dict()
    for key, value in kwargs.items():
        for k, v in value.items():
            if k not in new_dict:
                new_dict[k] = [v]
            else:
                new_dict[k].append(v)
            pass
    return new_dict


# print(merge_dicts(dict1={'a': 1, 'b': 2}, dict2={'b': 3, 'c': 4}, dict3={'c': 5, 'd': 6}))


# Напишите программу, которая принимает строку от пользователя и подсчитывает количество уникальных символов в этой строке.
# Создайте функцию count_unique_chars, которая принимает строку и возвращает количество уникальных символов.
# Выведите результат на экран.
def count_unique_chars(a: str) -> int:
    return len(set(a))


#print('Количество уникальных символов:', count_unique_chars('hello'))


# Напишите программу, которая создает словарь, содержащий информацию о студентах и их оценках.
# Ключами словаря являются имена студентов, а значениями - списки оценок. Создайте функцию calculate_average_grade,
# которая принимает словарь с оценками студентов и вычисляет средний балл для каждого студента.
# Функция должна возвращать новый словарь, в котором ключами являются имена студентов, а значениями - их средний балл.
# Выведите результат на экран.

def calculate_average_grade(dictionary: dict) -> dict:
    new_dict = dict()
    for key, value in dictionary.items():
        new_dict[key] = sum(value) / len(value)
    return new_dict


grades = {
    'Alice': [85, 90, 92],
    'Bob': [78, 80, 84],
    'Carol': [92, 88, 95]
}
print(calculate_average_grade(grades))
